module asm-x86

imports
  
  Common

context-free start-symbols
  
  Start

sorts

  Start File

context-free syntax
  
  Start = File 
  
  File.File = [
    [Externals]
    [Globals]
    [Sections]
  ]
  
  File.Empty = []
  
  Externals.Externals = [extern [{External ","}+]]
  Externals.NoExtern  = []
  External.External   = ID
  Globals.Globals     = [global [{Global ","}+]]
  Globals.NoGlobals   = []
  Global.Global       = ID
  
  Sections = [[{Section "\n"}*]]
  
  Section.DataSection = [
    SECTION .data
    [DataDeclaration]
  ]
  
  DataDeclaration.DataDeclaration = [[ID]: [DefineMultiplier?] [DefineType] [{DefineInitializer ","}+]]

  DefineMultiplier.DefineMultiplier = [TIMES [INT]]
  
  DefineType.Ten        = [dt]
  DefineType.Quadword   = [dq]
  DefineType.Doubleword = [dd]
  DefineType.Word       = [dw]
  DefineType.Byte       = [db]
  
  DefineInitializer.Int = INT
  DefineInitializer.String = STRING
    
  Section.TextSection = [
    SECTION .text
    [Instructions]
  ] 
  
  Instructions.NoInstructions = []
  Instructions = [[{Instruction "\n"}+]]
  
  Instruction.Label = [[ID]:]
  Instruction.Push  = [push [Operand]]
  Instruction.Pop   = [pop [Operand]]
  Instruction.Mov   = [mov [Operand], [Operand]]
  Instruction.Sub   = [sub [Operand], [Operand]]
  Instruction.Add   = [add [Operand], [Operand]]
  Instruction.Test  = [test [Operand], [Operand]]
  Instruction.Cmp   = [cmp [Operand], [Operand]]
  Instruction.Lea   = [lea [Operand], [Operand]]
  Instruction.Jle   = [jle [ID]]
  Instruction.Jl    = [jl [ID]]
  Instruction.Jne   = [jne [ID]]
  Instruction.Je    = [je [ID]]
  Instruction.Jmp   = [jmp [ID]]
  Instruction.Leave = [leave]
  Instruction.Ret   = [ret]
  Instruction.Call  = [call [ID]]
  
  Operand.DWPointer = <DWORD [<Expression>]>
  Operand.QWPointer = <QWORD [<Expression>]>
  Operand.Pointer = <[<Expression>]>
  Operand.Offset = <OFFSET FLAT: <ID>>
  Operand.Expression = Expression

  Expression.Sub = [[Expression] - [Expression]]
  Expression = Register
  Expression = Value
  Expression = ID {avoid}

  Value.Const = INT
  
  Register.RBP = [rbp]
  Register.RSP = [rsp]
  
  Register.EAX = [eax]
  Register.RAX = [rax]
  
  Register.EBX = [ebx]
  Register.RBX = [rbx]
  
  Register.ECX = [ecx]
  Register.RCX = [rcx]
  
  Register.ESI = [esi]
  Register.RSI = [rsi]
  
  Register.EDI = [edi]
  Register.RDI = [rdi]
    